Types and JS

    -Dynamic Typing: You don't tell the engine what type of data a variable holds, it figuares it out while your code is running.
    -In JS, an integar value can be assigned to a variable intially set as boolean(dynamic type).

Primitive Types

    -Primitive Type: A type of data that represents a single value. That is not a object.
        1.Undefined - represents lack of existence. Shouldn't set a variable to undefined.
        2.NULL - represents lack of existence. Can set a variable to this.
        3.Boolean - true or false.
        4.Number - Floating point number. The only 'number' type in JS.
        5.String - a sequence of characters. Both ' and " can be used.
        6.Symbol - Used in ES6.

Operators

    -Operator: a special function that is syntactically (written) differently.
          

Operator Precedence and Associativity

    -Opertor Precedence: which operator function gets called first. Functions are called in order of precedence. (HIGHER called first).
    -Associativity: what order operator functions get called in: left-to-right or right-to-left

    -Check opertor precedence pdf for the order. HIGHER ones called first.
        Eg. In, 3 + 4 * 5 -> * called first, then + later, then =.
        Eg. var a = 2, b = 3, c= 4;
            a = b = c;
            All the value in the end will be 4. Because, assignment (=) is right-to-left associativity.

    -JS engine check operator precedence first, if they are in the same order, it checks associativity (left to right or right to left).

Coercion

    -Coercion: converting a value from one type to another.
        int + int -> int
        string + string -> string (concatenate)
        int + string -> string
            Eg. var a = 1 + '2'; -> will give string '12'.

    Note: number + string in JS in 'string'.   


Comparison Operators

    Note: In JS, Number(false) = 0 and Number(true) = 1.
          boolean < Number -> in this case, boolean is turned into number and got compared.
          Number(undefined) = NaN. Number(null) = 0.

    Exceptions: false == 0 -> true. null == 0 -> false. null < 1 -> true. 
                "" == 0 -> true. "" == false -> true.
    -To avoid above cases, use strict equality (===). In strict equality, there is no coercion.

    -In JS, console.log(3 < 2 < 1) gives true because (3 < 2) = false and corecion turns false into 0.

    -Use '===' instead of '==' most of the time. Make sure all the data are in the correct type.

Existence and Booleans

    Note: Like Number(), there is also Boolean(). But do not use those for normal purposes.

    -Whatever value put inside if() in converted into boolean.
    -Boolean(undefined), Boolean(null), Boolean(""), Boolean(0) all gives false. 
    -The rest of the Boolean convertion gives true. Therefore, in order to check if a variable has value, do 'if(a || a===0)'.
    -We can use coercion to check if the variable is assigned a value.