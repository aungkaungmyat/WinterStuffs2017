Syntax Parser: A program that reads your code and determines what it does
Lexical Environment: where something sits physically in the code you write
Execution Context: A wrapper to help manage the code that is running


Name_value pair: a name which maps to a unique Name_value
Object: a collection of name_value pairs
        eg. Addreess:
        {
            Street: 'Main',
            Number: 100,
            Apartment:
            {
                Floor: 3,
                Number: 301
            }
        }


Global Environment and Global Object     

Global Execution context creates global object and 'this' whenever the code runs.
Global Object is avaiable for every code running inside.
'this' exists for every new window opens in browers.
For global level, global object(window) = this.

In JS, 
Global : "Not Inside a Function"


Creation and 'Hoisting'

In JS, a function can be called before it is created but a variable cannot be used if it is not declared yet (will give undefined). If a variable is never declared an error occurs.
'Hoisting': setup memory space for variables and functions

Execution Context has two phase
1. Creation phase where it creates global object, 'this', outer environment, and Hoisting (Variable Setup{intially set up to undefined} and functions setup).

Note:
All variables in JS are initally initialized as undefined.


JavaScript and Undefined

    Undefined is not an error. It is value in javascript. Can be used something like ( if(a === undefined) )
