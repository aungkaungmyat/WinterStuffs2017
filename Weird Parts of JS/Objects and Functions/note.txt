Objects and the Dot

    -Object: a collection of values that are given name.
    -Object can have
        1.Primitive "property"
        2.Object "property"
        3.Function "property"
    -To access an object 'person' with property 'firstname'. 
        1. person["firstname"]
        2. person.firstname
    -Check Objects and the Dot example to see how to deal with objects. Dot operator is preferred over "[]" operator.


 Objects and Object Literals (the prefered way of creating objects)

    -To create object, (var person = {};) can also be used.
    -Check Objects and Object Literals example to see different ways of creating objects.


Faking Namespaces

    -Namespae: a container for variables and functions.
        Eg. 'greet' exists in both 'english' and 'spanish' object. They can be distinguished by 'english.greet' and 'spanish.greet'.
    -To implement Namespace feature in JS, use Objects. Check Faking namespace for example.


JSON and Object Literals

    -JSON: JavaScript Object Notation    
    -In JSON, the property has to be put into quote("") in  JSON.
        Eg. {
                "firstname": "Mary",
                "isAProgrammer": true 
            }
        In Object Literals, the property does not have to be put inside quote. JSON is a subset of Object Literals. 
    -To convert Object to JSON, use 'JSON.stringify(object)'    
    -To convert JSON to Object, use 'JSON.parse(json)'

Functions are Objects

    -First Class Functions: everything you can do with other types you can do with functions.
    -Function is a special type of object. The five properties are primitive, object and function. Name is an optional. And code(invocable).
        Eg. function greet(){
                console.log('hi');
            }

            In this case, name is 'greet', and code is "console.log('hi)".



Function Statements and Function Expressions 

    -Expression: a unit of code that results in a value.
        Eg. "1+2;" is an expression. In "var a; a = 3", "a = 3" is also an expression. It results in a value.

    -Statement: just does work
        Eg. if statement ->   if( a === 3){

                              }. 
            It just does work. No value assigned.      


    -Two ways for creating functions.
        Eg.function greet(){       //greet is name 
             console.log('hi');  //this is code
           }


            var anonymousGreet = function(){    //there is no name. anonymousGreet is memory reference
                console.log('hi');              //this is code.
            }    

    -Check Function Statements and Function Expression example to see how to pass function as paremeter to another function. This is the concept of first class function.                     


By Value vs By reference

    -by value: copying the value into two seperate spots in memory
        eg. a = primitive; //a -> primitive value
            b = a;         //b -> copy of primitive value

    -by reference: all objects interact by reference.
        eg. a = object;
            b = a;          //both a and b points to the same object

    -Mutate: To change something. "Immutable" means it can't be changed.

    -by value (primitives)
    -by reference (all objects (including functions))
    -by reference (even as parameters)
    -equals operator sets up new memory space (new address)
        Look at By Value and By Reference example to see how they work.

