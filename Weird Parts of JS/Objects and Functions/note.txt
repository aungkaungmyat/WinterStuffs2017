Objects and the Dot

    -Object: a collection of values that are given name.
    -Object can have
        1.Primitive "property"
        2.Object "property"
        3.Function "property"
    -To access an object 'person' with property 'firstname'. 
        1. person["firstname"]
        2. person.firstname
    -Check Objects and the Dot example to see how to deal with objects. Dot operator is preferred over "[]" operator.


 Objects and Object Literals (the prefered way of creating objects)

    -To create object, (var person = {};) can also be used.
    -Check Objects and Object Literals example to see different ways of creating objects.


Faking Namespaces

    -Namespae: a container for variables and functions.
        Eg. 'greet' exists in both 'english' and 'spanish' object. They can be distinguished by 'english.greet' and 'spanish.greet'.
    -To implement Namespace feature in JS, use Objects. Check Faking namespace for example.


JSON and Object Literals

    -JSON: JavaScript Object Notation    
    -In JSON, the property has to be put into quote("") in  JSON.
        Eg. {
                "firstname": "Mary",
                "isAProgrammer": true 
            }
        In Object Literals, the property does not have to be put inside quote. JSON is a subset of Object Literals. 
    -To convert Object to JSON, use 'JSON.stringify(object)'    
    -To convert JSON to Object, use 'JSON.parse(json)'

Functions are Objects

    -First Class Functions: everything you can do with other types you can do with functions.
    -Function is a special type of object. The five properties are primitive, object and function. Name is an optional. And code(invocable).
        Eg. function greet(){
                console.log('hi');
            }

            In this case, name is 'greet', and code is "console.log('hi)".



Function Statements and Function Expressions 

    -Expression: a unit of code that results in a value.
        Eg. "1+2;" is an expression. In "var a; a = 3", "a = 3" is also an expression. It results in a value.

    -Statement: just does work
        Eg. if statement ->   if( a === 3){

                              }. 
            It just does work. No value assigned.      


    -Two ways for creating functions.
        Eg.function greet(){       //greet is name 
             console.log('hi');  //this is code
           }


            var anonymousGreet = function(){    //there is no name. anonymousGreet is memory reference
                console.log('hi');              //this is code.
            }    

    -Check Function Statements and Function Expression example to see how to pass function as paremeter to another function. This is the concept of first class function.                     


By Value vs By reference

    -by value: copying the value into two seperate spots in memory
        eg. a = primitive; //a -> primitive value
            b = a;         //b -> copy of primitive value

    -by reference: all objects interact by reference.
        eg. a = object;
            b = a;          //both a and b points to the same object

    -Mutate: To change something. "Immutable" means it can't be changed.

    -by value (primitives)
    -by reference (all objects (including functions))
    -by reference (even as parameters)
    -equals operator sets up new memory space (new address)
        Look at By Value and By Reference example to see how they work.


Objects, Functions, and 'this'

    -Inside object literals, primitives are called properties and functions are called methods.
    
    -Whenever a function is invoked, new execution context is created. 
    -If a method is on a object and that method is invoked, 'this' points to that object. Look at "Objects, Functions, and 'this'" example.

    -When 'this' is called inside, another function inside a function which is inside the object, that 'this' will invoke global object instead. 
    -In order to prevent above bug, assign 'this' to a variable and use that variable instead. For example, "var self = this;". Look example.


Arrays - Collections of Anything

    -JS array can store any different colletion of items.


'Arguments' and spread    

    -Arguments: The parameters you pass to a function
    -arguments contains all the values passed into the called functions
    
    -When function is evoked without passing the arguments, the value 'undefined' will be assigned to the arguments.
        -if only a value is passed out of three parameters, the last two will be undefined.
    -The passed-in values can be found in 'arguments'. Check 'Arguements and spread' for using arguments.

    -Argument is an 'array-like'. Like an array but cannot do everything that array can do.

    -Spread('...') could be preferred way for replacing arguments.


Overloading

    -JS does not support default overloading like other programming languages. But look at 'oveloading framework' to learn how to implement it.


Syntax Parsers

    -Syntax Parser in JS goes by character by character when it translates the code.


Dangerous - Automatic Semicolon Insertion    

    -Always put your own semicolon.
    -Syntax parsers knows the line ends when it reads 'carriage(enter)'. Then it automatically adds a semicolon by itself if missing.
        Look at Automatic Semicolon Insertion for how automatic semicolon insertion can mess up the code.

Whitespace

    -Whitespace: invisible characters that create literal 'space' in your written code.    
    -Look at 'whitespace' example to see how JS is literal with whitespaces.    


Immediately Invoked Functions Expressions (IIFEs)    

    -Is invoking the function right after creating it.
        Eg. var greeting = function(name){
                return 'Hello ' + name;
            }();
        When using something like console.log(greeting), 'greeting' no longer needs invoking '()' since it is already invoked.
        Another Common way
        Eg. (function(name) {
                var greeting = 'Inside IIFE: Hello';
                console.log(greeting + ' ' + name);
            }(firtname));   //IIFE

    -Side Note - writing things like "3;", "'I am string';" are valid in JS. They are just expressions.
        In order to use functions like an expression, it has to be expressed like   
            (function(name) {
                return 'Hello ' + name;
            });     


    -Check Immediately Invoked Functions Expressions (IIFE) example to see different way to using functions and IIFEs.          


IIFEs and Safe Code

    -The variables inside IIFE are specific to that function scope because of Execution Context.
        If you want to mess with the global object, pass the 'window' as argument to the function. Check IIFE and Safe Code for example.